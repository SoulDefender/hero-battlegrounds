buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
		dependencyManagementVersion = '0.5.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
	}
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '3.2.3' apply false
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	group = 'com.epam.microservice.sandbox'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = 1.8
}

configure(subprojects - project(":heroes-frontend")) {

	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}
	
	dependencies {
		compileOnly('org.projectlombok:lombok')
		implementation('one.util:streamex:0.6.6')
		implementation('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.6')
		testImplementation('org.springframework.boot:spring-boot-starter-test')
		testImplementation('junit:junit:4.12')
		testImplementation('org.hamcrest:hamcrest-junit:2.0.0.0')
		testImplementation('org.mockito:mockito-core:2.13.0')
	}

	ext {
		springCloudVersion = 'Edgware.SR1'
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}
}

configure(subprojects - [project(":heroes-frontend"), project(":model")]) {
    apply plugin: 'com.bmuschko.docker-remote-api'

    docker {
        registryCredentials {
            username = getConfigurationProperty('DOCKER_USERNAME', 'docker.username')
            password = getConfigurationProperty('DOCKER_PASSWORD', 'docker.password')
            email = getConfigurationProperty('DOCKER_EMAIL', 'docker.email')
        }
    }

    task createDockerfile(type: Dockerfile) {
        destFile = project.file('build/docker/Dockerfile')
        def appFileName = "/app/${jar.archiveName}"
        def appPort = project.findProperty("app.port") as Integer
        from 'openjdk:8-jre-alpine'
        maintainer 'Maksutov Dmytro "maksutov.dmitry@gmail.com"'
        copyFile jar.archiveName, appFileName
        entryPoint 'java'
        defaultCommand '-jar', appFileName
        exposePort appPort
        runCommand 'apk --update --no-cache add curl'
        instruction "HEALTHCHECK CMD curl -f http://localhost:${appPort}/health || exit 1"
    }

    task syncWebAppArchive(type: Sync) {
        dependsOn assemble
        from jar.archivePath
        into createDockerfile.destFile.parentFile
    }

    task buildImage(type: DockerBuildImage) {
        dependsOn createDockerfile
        inputDir = createDockerfile.destFile.parentFile
        tag = "hero-$jar.baseName:$jar.version"
    }

    createDockerfile.dependsOn syncWebAppArchive
}


String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}
